<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>一起写webserver 项目(二)</title>
      <link href="/2024/04/29/%E4%B8%80%E8%B5%B7%E5%86%99webserver%20%E9%A1%B9%E7%9B%AE(%E4%BA%8C)/"/>
      <url>/2024/04/29/%E4%B8%80%E8%B5%B7%E5%86%99webserver%20%E9%A1%B9%E7%9B%AE(%E4%BA%8C)/</url>
      
        <content type="html"><![CDATA[<h2 id="日志和同步原语的封装"><a href="#日志和同步原语的封装" class="headerlink" title="日志和同步原语的封装"></a>日志和同步原语的封装</h2><blockquote><p>写一个项目，一开始不知道从哪里开始，我的经验是大致看一下主函数，了解一下有哪些模块？然后从简单的模块开始逐个看，看完了记住流程思路，我们就可以复现，然后这样虽然阅读起来比整体一行一行看简单，但是各个模块之间相互穿插，单个模块看，理解不了它们之间的关系，所以建议所有模块看完后，再重新看一遍，把整个流程串通，这样整个项目就非常清晰了。</p></blockquote><p>其实我们也可以看作者的Readme的整体框架图</p><img src="https://camo.githubusercontent.com/326c456073716c6a81d925154df43a7787cf4088b794590c76a0f122274e7ef4/687474703a2f2f7777312e73696e61696d672e636e2f6c617267652f303035544a3263376c79316765306a3161747135686a33306736306c6d3077342e6a7067" alt="image.png" style="zoom:80%;" /><h3 id="Locker类"><a href="#Locker类" class="headerlink" title="Locker类"></a>Locker类</h3><p>这里的locker的封装是参考《Linux高性能服务器编程》，用了RAII的思想，即将<strong>资源的获取和释放绑定在对象的生命周期</strong>中。比较简单就不用怎么叙述了，其实这里完全可以c++的同步原语语法，感兴趣的读者可以自行尝试</p><ul><li><p>信号量</p>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">sem</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">sem</span>()&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">sem_init</span>(&amp;m_sem,<span class="number">0</span>,<span class="number">0</span>)!=<span class="number">0</span>)&#123;</span><br><span class="line">      <span class="keyword">throw</span> std::<span class="built_in">exception</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">explicit</span> <span class="title">sem</span><span class="params">(<span class="type">int</span> num)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">sem_init</span>(&amp;m_sem,<span class="number">0</span>,num)!=<span class="number">0</span>)&#123;</span><br><span class="line">      <span class="keyword">throw</span> std::<span class="built_in">exception</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  ~<span class="built_in">sem</span>()&#123;</span><br><span class="line">    <span class="built_in">sem_destroy</span>(&amp;m_sem);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="type">bool</span> <span class="title">wait</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sem_wait</span>(&amp;m_sem)==<span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="type">bool</span> <span class="title">post</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sem_post</span>(&amp;m_sem)==<span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  <span class="type">sem_t</span> m_sem&#123;&#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>同步锁</p>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">locker</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">locker</span>()&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">pthread_mutex_init</span>(&amp;mutex,<span class="literal">nullptr</span>)!=<span class="number">0</span>)&#123;</span><br><span class="line">      <span class="keyword">throw</span> std::<span class="built_in">exception</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  ~<span class="built_in">locker</span>()&#123;</span><br><span class="line">    <span class="built_in">pthread_mutex_destroy</span>(&amp;mutex);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="type">bool</span> <span class="title">lock</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">pthread_mutex_lock</span>(&amp;mutex)==<span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="type">bool</span> <span class="title">unlock</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">pthread_mutex_unlock</span>(&amp;mutex)==<span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="type">bool</span> <span class="title">trylock</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">pthread_mutex_trylock</span>(&amp;mutex)==<span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="type">pthread_mutex_t</span> *<span class="title">get</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &amp;mutex;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  <span class="type">pthread_mutex_t</span> mutex&#123;&#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>条件变量</p>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">cond</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">cond</span>()&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">pthread_cond_init</span>(&amp;m_cond, <span class="literal">nullptr</span>)!=<span class="number">0</span>)&#123;</span><br><span class="line">      <span class="keyword">throw</span> std::<span class="built_in">exception</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  ~<span class="built_in">cond</span>()&#123;</span><br><span class="line">    <span class="built_in">pthread_cond_destroy</span>(&amp;m_cond);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="type">bool</span> <span class="title">wait</span><span class="params">(<span class="type">pthread_mutex_t</span> *mutex)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">pthread_cond_wait</span>(&amp;m_cond,mutex)==<span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="type">bool</span> <span class="title">timewait</span><span class="params">(<span class="type">pthread_mutex_t</span> *mutex,<span class="keyword">struct</span> timespec t)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">pthread_cond_timedwait</span>(&amp;m_cond,mutex,&amp;t)==<span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="type">bool</span> <span class="title">signal</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">pthread_cond_signal</span>(&amp;m_cond)==<span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="type">bool</span> <span class="title">broadcast</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">pthread_cond_broadcast</span>(&amp;m_cond)==<span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  <span class="type">pthread_cond_t</span> m_cond&#123;&#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><h2 id="LOG类"><a href="#LOG类" class="headerlink" title="LOG类"></a>LOG类</h2><p>LOG类就是项目中常见的日志系统，由服务器自动创建，并记录运行状态，错误信息，访问数据的文件。<br>从框架图我们可以看出，这里的日志分为<strong>同步日志</strong>和<strong>异步日志</strong>。</p><p><strong>同步日志</strong>：日志写入函数与工作线程<strong>串行执行</strong>，由于涉及<strong>I&#x2F;O操作</strong>，同步日志会阻塞整个处理流程，服务器所能处理的并发能力将有所下降，尤其是在访问峰值时，写日志可能会成为系统的瓶颈。</p><p><strong>异步日志</strong>：将工作线程所写的日志内容先存入<strong>阻塞队列</strong>，专门的一个线程与主线程并行执行的关系，这个线程从阻塞队列中取出内容，写入日志，从而不影响主线程。</p><p>其实异步日志是一个典型的<strong>生产者-消费者模型</strong>。其中工作线程时生产，写线程是消费者。生产者-消费者模型的临界区(缓冲区)是什么呢？在这个日志系统中，这个临界区就是一个<strong>阻塞队列</strong></p><h3 id="循环队列"><a href="#循环队列" class="headerlink" title="循环队列"></a>循环队列</h3><ul><li><p>阻塞队列实现</p>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">block_queue</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="comment">// 构造 析构 clear  full empty size() maxsize() back front push pop pop()</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">explicit</span> <span class="title">block_queue</span><span class="params">(<span class="type">int</span> maxsize=<span class="number">1000</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(maxsize&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    m_size=<span class="number">0</span>;</span><br><span class="line">    m_maxsize=maxsize;</span><br><span class="line">    m_array=<span class="keyword">new</span> T[maxsize];</span><br><span class="line">    m_front=<span class="number">-1</span>;</span><br><span class="line">    m_back=<span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ~<span class="built_in">block_queue</span>()&#123;</span><br><span class="line">    m_lock.<span class="built_in">lock</span>();</span><br><span class="line">    <span class="keyword">delete</span>[] m_array;</span><br><span class="line">    m_lock.<span class="built_in">unlock</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">clear</span><span class="params">()</span></span>&#123;</span><br><span class="line">    m_lock.<span class="built_in">lock</span>();</span><br><span class="line">    m_size=<span class="number">0</span>;</span><br><span class="line">    m_front=<span class="number">-1</span>;</span><br><span class="line">    m_back=<span class="number">-1</span>;</span><br><span class="line">    m_lock.<span class="built_in">unlock</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="type">bool</span> <span class="title">full</span><span class="params">()</span></span>&#123;</span><br><span class="line">    m_lock.<span class="built_in">lock</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(m_size==m_maxsize) &#123;</span><br><span class="line">      m_lock.<span class="built_in">unlock</span>();</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    m_lock.<span class="built_in">unlock</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="type">bool</span> <span class="title">empty</span><span class="params">()</span></span>&#123;</span><br><span class="line">    m_lock.<span class="built_in">lock</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(m_size==<span class="number">0</span>)&#123;</span><br><span class="line">      m_lock.<span class="built_in">unlock</span>();</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    m_lock.<span class="built_in">unlock</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="type">bool</span> <span class="title">front</span><span class="params">(T &amp;item)</span></span>&#123;</span><br><span class="line">    m_lock.<span class="built_in">lock</span>();</span><br><span class="line">    <span class="keyword">if</span>(m_size==<span class="number">0</span>)&#123;</span><br><span class="line">      m_lock.<span class="built_in">unlock</span>();</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    m_array[m_front]=item;</span><br><span class="line">    m_lock.<span class="built_in">unlock</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="type">bool</span> <span class="title">back</span><span class="params">(T &amp;item)</span></span>&#123;</span><br><span class="line">    m_lock.<span class="built_in">lock</span>();</span><br><span class="line">    <span class="keyword">if</span>(m_size==<span class="number">0</span>)&#123;</span><br><span class="line">      m_lock.<span class="built_in">unlock</span>();</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    m_array[m_back]=item;</span><br><span class="line">    m_lock.<span class="built_in">unlock</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="type">int</span> <span class="title">size</span><span class="params">()</span></span>&#123;</span><br><span class="line">    m_lock.<span class="built_in">lock</span>();</span><br><span class="line">    <span class="type">int</span> tmp=<span class="number">0</span>;</span><br><span class="line">    tmp=m_size;</span><br><span class="line">    m_lock.<span class="built_in">unlock</span>();</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="type">int</span> <span class="title">maxsize</span><span class="params">()</span></span>&#123;</span><br><span class="line">    m_lock.<span class="built_in">lock</span>();</span><br><span class="line">    <span class="type">int</span> tmp=<span class="number">0</span>;</span><br><span class="line">    tmp=m_maxsize;</span><br><span class="line">    m_lock.<span class="built_in">unlock</span>();</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="type">bool</span> <span class="title">push</span><span class="params">(<span class="type">const</span> T&amp;item)</span></span>&#123;</span><br><span class="line">    m_lock.<span class="built_in">lock</span>();</span><br><span class="line">    <span class="keyword">if</span>(m_size==m_maxsize)&#123; <span class="comment">//队列满了</span></span><br><span class="line">      m_cond.<span class="built_in">broadcast</span>();</span><br><span class="line">      m_lock.<span class="built_in">unlock</span>();</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    m_back=(m_back+<span class="number">1</span>)%m_maxsize;</span><br><span class="line">    m_array[m_back]=item;</span><br><span class="line"></span><br><span class="line">    m_size++;</span><br><span class="line">    m_cond.<span class="built_in">broadcast</span>();</span><br><span class="line">    m_lock.<span class="built_in">unlock</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="type">bool</span> <span class="title">pop</span><span class="params">(T &amp;item)</span></span>&#123;</span><br><span class="line">    m_lock.<span class="built_in">lock</span>();</span><br><span class="line">    <span class="keyword">while</span> (m_size&lt;=<span class="number">0</span>)&#123; <span class="comment">// 防止虚假唤醒</span></span><br><span class="line">      <span class="keyword">if</span>(!m_cond.<span class="built_in">wait</span>(m_lock.<span class="built_in">get</span>()))&#123;</span><br><span class="line">        m_lock.<span class="built_in">unlock</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    m_front=(m_front+<span class="number">1</span>)%m_maxsize;</span><br><span class="line">    item=m_array[m_front];</span><br><span class="line"></span><br><span class="line">    m_size--;</span><br><span class="line">    m_lock.<span class="built_in">unlock</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="type">bool</span> <span class="title">pop</span><span class="params">(T &amp;item,<span class="type">int</span> timeout)</span></span>&#123; <span class="comment">// 毫秒</span></span><br><span class="line">    m_lock.<span class="built_in">lock</span>();</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">timespec</span> t&#123;<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">timeval</span> now&#123;<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">gettimeofday</span>(&amp;now, <span class="literal">nullptr</span>);</span><br><span class="line"></span><br><span class="line">    t.tv_sec=now.tv_sec+timeout/<span class="number">1000</span>;</span><br><span class="line">    t.tv_nsec=(timeout%<span class="number">1000</span>)*<span class="number">1000</span>;</span><br><span class="line">    <span class="keyword">if</span>(m_size&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">      <span class="keyword">if</span>(!m_cond.<span class="built_in">timewait</span>(m_lock.<span class="built_in">get</span>(),t))&#123;</span><br><span class="line">        m_lock.<span class="built_in">unlock</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(m_size&lt;=<span class="number">0</span>)&#123; <span class="comment">// 锁加条件双重验证</span></span><br><span class="line">      m_lock.<span class="built_in">unlock</span>();</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    m_front=(m_front+<span class="number">1</span>)%m_maxsize;</span><br><span class="line">    item=m_array[m_front];</span><br><span class="line">    m_size--;</span><br><span class="line">    m_lock.<span class="built_in">unlock</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  cond m_cond;</span><br><span class="line">  locker m_lock;</span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> m_maxsize&#123;&#125;;</span><br><span class="line">  <span class="type">int</span> m_size&#123;&#125;;</span><br><span class="line">  T* m_array;</span><br><span class="line">  <span class="type">int</span> m_front&#123;&#125;;</span><br><span class="line">  <span class="type">int</span> m_back&#123;&#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>  可以看出这里除了构造，大部分都是要加锁的，这里生产和消费的同步用的条件变量+同步锁</p></li></ul><h3 id="log"><a href="#log" class="headerlink" title="log"></a>log</h3><h4 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h4><p>这个项目的很多模块都用单例，单例模式保证了一个类只有一个实例，并提供一个访问它的全局访问点，该实例被所有程序模块共享。</p><p>单例模式也分为两种，一种是懒汉模式：顾名思义，懒汉模式非常懒，当没有人用它的时候它就不初始化，只有被第一次使用时才去初始化；另一种是饿汉模式：与懒汉模式相反，程序运行时就立刻创建实例进行初始化。</p><p>经典的懒汉模式一般要使用<strong>双检测锁</strong>。但C++11之后，可以使用静态局部变量初始化，就不再需要锁，编译器会负责线程安全的问题。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Log</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="comment">//  采用懒汉的单例模式</span></span><br><span class="line">  <span class="function"><span class="type">static</span> Log* <span class="title">get_instance</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">static</span> Log instance;</span><br><span class="line">    <span class="keyword">return</span> &amp;instance;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="type">static</span> <span class="type">void</span>* <span class="title">flush_log_thread</span><span class="params">(<span class="type">void</span> *args)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Log::<span class="built_in">get_instance</span>()-&gt;<span class="built_in">async_write_log</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="type">bool</span> <span class="title">init</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* file_name,<span class="type">int</span> close_log,<span class="type">int</span> log_buf_size,<span class="type">int</span> split_size,<span class="type">int</span> max_queue_size=<span class="number">0</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">write_log</span><span class="params">(<span class="type">int</span> level,<span class="type">const</span> <span class="type">char</span> *format,...)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">flush</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="type">static</span> tm <span class="title">get_time</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  <span class="built_in">Log</span>();</span><br><span class="line">  <span class="keyword">virtual</span> ~<span class="built_in">Log</span>()&#123;&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  <span class="type">char</span> * m_buf&#123;&#125;;</span><br><span class="line">  <span class="type">bool</span> m_is_async; <span class="comment">//是否同步</span></span><br><span class="line">  FILE *m_fp&#123;&#125;; <span class="comment">// 文件描述符</span></span><br><span class="line">  locker m_mutex; <span class="comment">// 互斥锁</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>一些关键的条件变量</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  <span class="type">char</span> log_name[<span class="number">128</span>]&#123;&#125;; <span class="comment">//日志文件名</span></span><br><span class="line">  <span class="type">char</span> dir_name[<span class="number">128</span>]&#123;&#125;; <span class="comment">//目录名称</span></span><br><span class="line">  <span class="type">int</span> m_close_log&#123;&#125;;</span><br><span class="line">  <span class="type">long</span> <span class="type">long</span> m_count; <span class="comment">//日志行数</span></span><br><span class="line">  <span class="type">int</span> m_split_size&#123;&#125;; <span class="comment">//日志最大行数</span></span><br><span class="line">  <span class="type">int</span> m_log_buf_size&#123;&#125;; <span class="comment">// 日志缓冲区大小</span></span><br><span class="line">  <span class="type">int</span> m_today&#123;&#125;;</span><br><span class="line">  <span class="type">char</span> * m_buf&#123;&#125;;</span><br><span class="line">  block_queue&lt;std::string&gt; *m_block_queue&#123;&#125;; <span class="comment">// 阻塞队列(异步使用)</span></span><br><span class="line">  <span class="type">bool</span> m_is_async; <span class="comment">//是否同步</span></span><br><span class="line">  FILE *m_fp&#123;&#125;; <span class="comment">// 文件描述符</span></span><br><span class="line">  locker m_mutex; <span class="comment">// 互斥锁</span></span><br></pre></td></tr></table></figure><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><p>这里的根据是否设置有阻塞队列的长度判断是否是异步，因为同步用不到阻塞队列，采用异步，我们就要创建一个子进程，这个子进程会worker是这个log类的一个静态方法，<br>这个静态方法会调用log静态实例的一个私有方法，这个私有方法会不断检测阻塞队列中是否有信息，从阻塞队列的代码我们知道这个会阻塞，如果没有信息，有信息就会进行fputs的系统调用IO操作</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Log::init</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *name, <span class="type">int</span> close_log, <span class="type">int</span> log_buf_size=<span class="number">8192</span>, <span class="type">int</span> split_size=<span class="number">5000000</span>, <span class="type">int</span> max_queue_size)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(max_queue_size&gt;<span class="number">0</span>)&#123; <span class="comment">// 异步</span></span><br><span class="line">    m_is_async= <span class="literal">true</span>;</span><br><span class="line">    m_block_queue=<span class="keyword">new</span> <span class="built_in">block_queue</span>&lt;std::string&gt;(max_queue_size);</span><br><span class="line">    <span class="type">pthread_t</span> tid;</span><br><span class="line">    <span class="built_in">pthread_create</span>(&amp;tid, <span class="literal">nullptr</span>,Log::flush_log_thread, <span class="literal">nullptr</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span>* <span class="title">flush_log_thread</span><span class="params">(<span class="type">void</span> *args)</span></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> Log::<span class="built_in">get_instance</span>()-&gt;<span class="built_in">async_write_log</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  <span class="function"><span class="type">void</span> *<span class="title">async_write_log</span><span class="params">()</span></span>&#123;</span><br><span class="line">    std::string log_str;</span><br><span class="line">    <span class="keyword">while</span>(m_block_queue-&gt;<span class="built_in">pop</span>(log_str))&#123;</span><br><span class="line">      m_mutex.<span class="built_in">lock</span>();</span><br><span class="line">      <span class="built_in">fputs</span>(log_str.<span class="built_in">c_str</span>(),m_fp);</span><br><span class="line">      m_mutex.<span class="built_in">unlock</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>下面的操作就是得到一个日志全名称full_log_name，这个名称就是日志名称+日期，我们文件就会创建或者打开这个full_log_name的文件</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Log::init</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *name, <span class="type">int</span> close_log, <span class="type">int</span> log_buf_size=<span class="number">8192</span>, <span class="type">int</span> split_size=<span class="number">5000000</span>, <span class="type">int</span> max_queue_size)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  m_close_log=close_log;</span><br><span class="line">  m_split_size=split_size;</span><br><span class="line">  m_buf=<span class="keyword">new</span> <span class="type">char</span>[log_buf_size];</span><br><span class="line">  <span class="built_in">memset</span>(m_buf,<span class="string">&#x27;\0&#x27;</span>, m_log_buf_size);</span><br><span class="line"></span><br><span class="line">  tm my_tm=Log::<span class="built_in">get_time</span>();</span><br><span class="line"></span><br><span class="line">  m_today=my_tm.tm_mday;</span><br><span class="line"></span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *p=<span class="built_in">strchr</span>(name,<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="type">char</span> full_log_name[<span class="number">256</span>];</span><br><span class="line">  <span class="keyword">if</span>(p== <span class="literal">nullptr</span>)&#123; <span class="comment">// 没有目录</span></span><br><span class="line">    <span class="built_in">strcpy</span>(log_name,name);</span><br><span class="line">    <span class="built_in">snprintf</span>(full_log_name,<span class="number">255</span>,<span class="string">&quot;%d_%02d_%02d_%s&quot;</span>,my_tm.tm_year+<span class="number">1900</span>,my_tm.tm_mon+<span class="number">1</span>,my_tm.tm_mday,log_name);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span>&#123;  <span class="comment">//有目录</span></span><br><span class="line">    <span class="built_in">strcpy</span>(log_name,p+<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">strncpy</span>(dir_name,name,p- name+<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">snprintf</span>(full_log_name,<span class="number">255</span>,<span class="string">&quot;%s%d_%02d_%02d_%s&quot;</span>,dir_name,my_tm.tm_year+<span class="number">1900</span>,my_tm.tm_mon+<span class="number">1</span>,my_tm.tm_mday,log_name);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  m_fp= <span class="built_in">fopen</span>(full_log_name,<span class="string">&quot;a&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span>(m_fp== <span class="literal">nullptr</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><h4 id="write-log"><a href="#write-log" class="headerlink" title="write_log"></a>write_log</h4><p>这里的日志分了等级<br>Log分级：</p><ul><li>Debug，调试代码时的输出，在系统实际运行时，一般不使用。</li><li>Warn，这种警告与调试时终端的warning类似，同样是调试代码时使用。</li><li>Info，报告系统当前的状态，当前执行的流程或接收的信息等。</li><li>Erro，输出系统的错误信息</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Log::write_log</span><span class="params">(<span class="type">int</span> level,<span class="type">const</span> <span class="type">char</span> *format,...)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  tm my_tm=Log::<span class="built_in">get_time</span>();</span><br><span class="line"></span><br><span class="line">  <span class="type">char</span> s[<span class="number">16</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">  <span class="keyword">switch</span> (level) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">      <span class="built_in">strcpy</span>(s,<span class="string">&quot;[debug]:&quot;</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">      <span class="built_in">strcpy</span>(s,<span class="string">&quot;[info]:&quot;</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">      <span class="built_in">strcpy</span>(s,<span class="string">&quot;[warn]:&quot;</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">      <span class="built_in">strcpy</span>(s,<span class="string">&quot;[error]:&quot;</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="built_in">strcpy</span>(s,<span class="string">&quot;[info]:&quot;</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>这里的为了日志也是会被分文件的，有下面两种情况</p><ol><li>到了新的一天，这时的日志全名称就变了，就是新文件</li><li>日志写行数超过了限制的最大行数，这个就要序号分文件了</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">m_mutex.<span class="built_in">lock</span>();</span><br><span class="line">m_count++;</span><br><span class="line"><span class="keyword">if</span>(my_tm.tm_mday!=m_today||m_count%m_split_size==<span class="number">0</span>)&#123;</span><br><span class="line">  <span class="type">char</span> new_log[<span class="number">256</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">  <span class="built_in">fflush</span>(m_fp);</span><br><span class="line">  <span class="built_in">fclose</span>(m_fp);</span><br><span class="line">  <span class="type">char</span> tail[<span class="number">16</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">  <span class="built_in">snprintf</span>(tail,<span class="number">16</span>,<span class="string">&quot;%d_%02d_%02d_&quot;</span>,my_tm.tm_year+<span class="number">1900</span>,my_tm.tm_mon+<span class="number">1</span>,my_tm.tm_mday);</span><br><span class="line">  <span class="keyword">if</span>(my_tm.tm_mday!=m_today)&#123; <span class="comment">// 日期不同，要新建日志文件</span></span><br><span class="line">    m_count=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">snprintf</span>(new_log,<span class="number">255</span>,<span class="string">&quot;%s%s%s&quot;</span>,dir_name,tail,log_name);</span><br><span class="line">    m_today=my_tm.tm_mday;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span>(m_count%m_split_size==<span class="number">0</span>)&#123;</span><br><span class="line">    <span class="built_in">snprintf</span>(new_log, <span class="number">255</span>, <span class="string">&quot;%s%s%s.%lld&quot;</span>, dir_name, tail, log_name, m_count / m_split_size);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  m_fp=<span class="built_in">fopen</span>(new_log,<span class="string">&quot;a&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">m_mutex.<span class="built_in">unlock</span>();</span><br></pre></td></tr></table></figure><p>这里write_log其实是用了c语言的可变参数的，同时搭配了vsnprintf，让传参数更灵活</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">va_list list;</span><br><span class="line"><span class="built_in">va_start</span>(list,format);</span><br><span class="line">std::string log_str;</span><br><span class="line">m_mutex.<span class="built_in">lock</span>();</span><br><span class="line"><span class="type">int</span> n= <span class="built_in">snprintf</span>(m_buf,<span class="number">48</span>,<span class="string">&quot;%d-%01d-%01d %01d:%01d:%01d %s&quot;</span>,my_tm.tm_year+<span class="number">1900</span>,my_tm.tm_mon+<span class="number">1</span>,my_tm.tm_mday,my_tm.tm_hour,my_tm.tm_min,my_tm.tm_sec,s);</span><br><span class="line"><span class="type">int</span> m= <span class="built_in">vsnprintf</span>(m_buf+n,m_log_buf_size-n<span class="number">-1</span>,format,list);</span><br><span class="line">m_buf[m+n]=<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">m_buf[m+n+<span class="number">1</span>]=<span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">log_str=m_buf;</span><br></pre></td></tr></table></figure><p>平时调用写日志是用定义成不同等级的宏，这样方便书写</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> LOG_DEBUG(foramt,...) <span class="keyword">if</span>(m_close_log==0) &#123; Log::get_instance()-&gt;write_log(0,foramt, ##__VA_ARGS__); Log::get_instance()-&gt;flush();&#125;;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LOG_INFO(foramt,...) <span class="keyword">if</span>(m_close_log==0) &#123; Log::get_instance()-&gt;write_log(1,foramt, ##__VA_ARGS__); Log::get_instance()-&gt;flush();&#125;;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LOG_WARN(foramt,...) <span class="keyword">if</span>(m_close_log==0) &#123; Log::get_instance()-&gt;write_log(2,foramt, ##__VA_ARGS__); Log::get_instance()-&gt;flush();&#125;;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LOG_ERROR(foramt,...) <span class="keyword">if</span>(m_close_log==0) &#123; Log::get_instance()-&gt;write_log(3,foramt, ##__VA_ARGS__); Log::get_instance()-&gt;flush();&#125;;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 一起做项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一起写webserver 项目(一)</title>
      <link href="/2024/04/29/%E4%B8%80%E8%B5%B7%E5%86%99webserver%20%E9%A1%B9%E7%9B%AE(%E4%B8%80)/"/>
      <url>/2024/04/29/%E4%B8%80%E8%B5%B7%E5%86%99webserver%20%E9%A1%B9%E7%9B%AE(%E4%B8%80)/</url>
      
        <content type="html"><![CDATA[<p>在做整个项目之前建议看完《Linux高性能服务器编程》-中国-游双，这个项目会用到里面的很多知识。</p><h2 id="webserver-环境配置"><a href="#webserver-环境配置" class="headerlink" title="webserver 环境配置"></a>webserver 环境配置</h2><h3 id="安装Linux环境"><a href="#安装Linux环境" class="headerlink" title="安装Linux环境"></a>安装Linux环境</h3><p>webserver作为c++的一个经典项目，虽然烂大街，但是对于网络编程和系统编程非常重要，几乎等同于spring于java,可以不用，但基本要会。</p><p>选择一个github的项目 <a href="https://github.com/qinguoyi/TinyWebServer">GitHub - qinguoyi&#x2F;TinyWebServer: :fire: Linux下C++轻量级WebServer服务器</a></p><p>我用的是wsl2子系统，发行版是Debian系统，gcc、g++默认都已经安装了，推荐大家用云服务器，这样项目运行访问时就不必是回环地址，这样更贴合生产环境。</p><h3 id="安装MYSQL"><a href="#安装MYSQL" class="headerlink" title="安装MYSQL"></a>安装MYSQL</h3><p>使用<strong>apt</strong>包管理器：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install mysql-server</span><br></pre></td></tr></table></figure><p>其他发行版也同理</p><h3 id="运行项目"><a href="#运行项目" class="headerlink" title="运行项目"></a>运行项目</h3><p>然后就是克隆项目运行</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git init <span class="comment">## 将本地仓库初始化</span></span><br><span class="line">git <span class="built_in">clone</span> &lt;url&gt; <span class="comment">## 将需要的项⽬从 github 上克隆下来，url为项⽬地址</span></span><br></pre></td></tr></table></figure><p>测试前确认已安装MySQL数据库（mysql的配置）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span> 建⽴yourdb库</span><br><span class="line"><span class="keyword">create</span> database yourdb;</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 创建<span class="keyword">user</span>表</span><br><span class="line">USE yourdb;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">user</span>(</span><br><span class="line">username <span class="type">char</span>(<span class="number">50</span>) <span class="keyword">NULL</span>,</span><br><span class="line">passwd <span class="type">char</span>(<span class="number">50</span>) <span class="keyword">NULL</span></span><br><span class="line">)ENGINE<span class="operator">=</span>InnoDB;</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 添加数据</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">user</span>(username, passwd) <span class="keyword">VALUES</span>(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;passwd&#x27;</span>);</span><br></pre></td></tr></table></figure><p>修改main.cpp中的数据库初始化信息</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//数据库登录名,密码,库名</span><br><span class="line">string user = <span class="string">&quot;root&quot;</span>;</span><br><span class="line">string passwd = <span class="string">&quot;root&quot;</span>;</span><br><span class="line">string databasename = <span class="string">&quot;yourdb&quot;</span>;</span><br></pre></td></tr></table></figure><p>随后我们执行</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh ./build.sh</span><br></pre></td></tr></table></figure><p>出现了BUG</p><p><img src="http://yesho-web.oss-cn-hangzhou.aliyuncs.com/img/20240429210138.png" alt="image.png"></p><p>这里是缺少mysql库文件，我们去查一下GitHub上的issue，发现作者给了解决方法</p><img src="http://yesho-web.oss-cn-hangzhou.aliyuncs.com/img/20240429210238.png" alt="image.png" style="zoom:60%;" /><p>执行代码</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install libmysqlclient-dev</span><br></pre></td></tr></table></figure><p>再make一遍，果然不再报库文件缺失，至于warning不用管。<br>这时候ls一下，可以看到server可运行文件了</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./server</span><br></pre></td></tr></table></figure><img src="http://img-blog.csdnimg.cn/img_convert/e009c7109caf9c7308f3f6b3f5e2a390.png" alt="image.png" style="zoom:60%;" /><p>光标不动了，说明运行成功。</p><h3 id="浏览器访问"><a href="#浏览器访问" class="headerlink" title="浏览器访问"></a>浏览器访问</h3><p>接下来就是浏览器访问了，在保持服务器运行的情况下，打开浏览器</p><p>如果是虚拟机的同学，可以使用回环地址（不知道的翻一下计网的书）</p><blockquote><p>127.0.0.1:9006</p></blockquote><p>云服务器的同学，可以去管理台查一下自己的云服务器的公网IP，然后输入</p><blockquote><p>IP:9006</p></blockquote><p>如果发现打不开，就去服务器实例的防火墙（腾讯云）&#x2F;安全组（阿里云）里面把9006端口设置为允许</p><img src="http://yesho-web.oss-cn-hangzhou.aliyuncs.com/img/20240429210447.png" alt="image.png" style="zoom:60%;" /><p>下面开始正式写代码！</p>]]></content>
      
      
      <categories>
          
          <category> 一起做项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo 教程</title>
      <link href="/2024/03/20/hello-world/"/>
      <url>/2024/03/20/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo generate &amp;&amp; hexo deploy  // Git BASH终端</span><br><span class="line">hexo clean; hexo generate; hexo deploy  // VSCODE终端</span><br></pre></td></tr></table></figure><ul><li>hexo clean：删除之前生成的文件，若未生成过静态文件，可忽略此命令。</li><li>hexo generate：生成静态文章，可以用hexo g缩写</li><li>hexo deploy：部署文章，可以用hexo d缩写</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
